import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import { AppModule } from '../app.module';
import * as request from 'supertest';
import { Sequelize } from 'sequelize-typescript';
import { PlanModule } from './plan.module';

const seeder: any = require('../core/seeders');
describe('PlansController (e2e)', () => {
  let app: INestApplication;
  let sequelize: Sequelize;

  beforeAll(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [
        PlanModule, AppModule
      ],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
    sequelize = moduleFixture.get<Sequelize>(Sequelize);
    const queryInterface = sequelize.getQueryInterface();
    await seeder.refreshDatabase(queryInterface, sequelize);

  });

  afterAll(async () => {
    await app.close();
    await sequelize.close();
  });
  it('should create a plan and return it', async () => {
    await sequelize.query(`
        UPDATE wallets
        SET balance = 500000 * 100
        WHERE user_id = 1;
    `);
    const response = await request(app.getHttpServer())
      .post('/plans/buy')
      .send({ user_id: 1, product_id: 1, quantity: 1 })
      .expect(201);

    expect(response.body).toMatchObject({
      success: true,
      message: 'Plan purchased successfully',
      data: {
        id: expect.any(Number),
        userId: 1,
        productId: 1,
        quantity: 1,
        totalPrice: 10000,
        price: 10000,
      },
    });

    // Verify wallet balance
    const [wallet] = await sequelize.query(`
        SELECT balance
        FROM wallets
        WHERE user_id = 1
        LIMIT 1;
    `);
    console.log(wallet);
    // expect(wallet.balance).toBe(30000);
  });

  it('should return 400 if quantity is invalid', async () => {
    const response = await request(app.getHttpServer())
      .post('/plans/buy')
      .send({ user_id: 1, product_id: 1, quantity: 0 })
      .expect(400);
    expect(response.body.message).toBe('Quantity must be greater than zero');
  });

  it('should return 400 if wallet balance is insufficient', async () => {
    await sequelize.query(`
        UPDATE wallets
        SET balance = 5000
        WHERE user_id = 1;
    `);
    const response = await request(app.getHttpServer())
      .post('/plans/buy')
      .send({ user_id: 1, product_id: 1, quantity: 2 })
      .expect(400);

    expect(response.body.message).toBe('Insufficient wallet balance');
  });
});
